[buildout]
extends =
    versions.cfg
    project.cfg

parts =
    mkdirs
    scripts
    circus.ini
    circusd
    circusctl
    couchdb.ini
    auctions.ini
    redis.conf
    auctions_data_bridge.yaml
    oauth_provider.ini
    auction_worker_defaults.json
    download_loggly_pipe
    preapre_loggly_script
    loggly_pipe.service

find-links =
    http://op:x9W3jZ@dist.quintagroup.com/op/
    http://dist.quintagroup.com/proxy/pypi/

server_type = sandbox 

[ports]
recipe = teamrubber.recipe.portbase
base = ${project:base-port}

[config-from-template]
recipe = collective.recipe.template[genshi]:genshi
input = profiles/templates/${:_buildout_section_name_}
output = etc/${:_buildout_section_name_}


[mkdirs]
recipe =  z3c.recipe.mkdir
paths = 
    ${buildout:directory}/var/log
    ${buildout:directory}/var/redis
    ${buildout:directory}/var/couchdb

[scripts]
recipe = zc.recipe.egg
eggs = 
    Paste
    PasteScript
    PasteDeploy
    flask-project-templates
    ZopeSkel
    openprocurement.auction
    openprocurement.auth
    openprocurement.auctions.dgf
    CouchDB
    circus
    circus-web
    gunicorn
    ExtendedJournalHandler
    request_id_middleware

interpreter = python_interpreter

[circusd]
<=scripts
initialization =
    sys.argv[1:1] = ('${buildout:directory}/etc/circus.ini').split()
interpreter = circusd_python
scripts = circusd

[circusctl]
<=scripts
interpreter =
initialization =
    sys.argv[1:1] = ('--endpoint ${circus.ini:endpoint}').split()
scripts = circusctl

[circus.ini]
<= config-from-template
statsd = 0
httpd = 0
httpd_host = 0.0.0.0
httpd_port =${ports:8}
endpoint = ipc://${buildout:directory}/var/circus_endpoint
pubsub_endpoint = ipc://${buildout:directory}/var/circus_pubsub
stats_endpoint = ipc://${buildout:directory}/var/circus_stats
with_couchdb = ${project:with_couchdb}
with_redis = ${project:with_redis}
with_auctions_server = ${project:with_auctions_server}
with_oauth_server = ${project:with_oauth_server}
with_data_bridge = ${project:with_data_bridge}
data_bridge_planning_with_couch = ${project:data_bridge_planning_with_couch}
data_bridge_activate_systemd = ${project:data_bridge_activate_systemd}

[couchdb.ini]
<= config-from-template
port = ${ports:0}
host = ${project:couchdb_host}
couchdb_admin = ${project:couchdb_admin}
couchdb_password = ${project:couchdb_password}
munin_password = ${project:munin_password}
with_couchdb_replicate = ${project:with_couchdb_replicate}


[auctions.ini]
<= config-from-template
host = 0.0.0.0
port = ${ports:1}
workers = 2
redis_url = redis://:${project:redis_password}@${project:redis_host}:${ports:2}/${project:redis_mapping_db}
external_couch_url = http://localhost:${ports:1}/auction 
internal_couch_url = http://${project:couchdb_admin}:${project:couchdb_password}@localhost:${ports:0}/
proxy_internal_couch_url = http://localhost:${ports:0}/
auctions_db =  ${project:auctions_couchdb_databese_name}
timezone = ${project:timezone}
HASH_SECRET_KEY = ${project:hash_secret_key}
preferred_url_scheme = http
debug = 1
auto_build = 1

[redis.conf]
<= config-from-template
port = ${ports:2}
dir = ${buildout:directory}/var/redis
host = ${project:redis_host}
password = ${project:redis_password}


[auctions_data_bridge.yaml]
<= config-from-template
tenders_api_server = https://api-sandbox.openprocurement.org
tenders_api_version = ${project:tenders_api_version}
tenders_api_token = ${project:tenders_api_token}
couch_url = http://${project:couchdb_admin}:${project:couchdb_password}@${project:couchdb_host}:${ports:0}/
auctions_db = ${project:auctions_couchdb_databese_name}
timezone = ${project:timezone}
auction_worker = ${buildout:directory}/bin/auction_worker
auction_worker_config = ${buildout:directory}/etc/auction_worker_defaults.json


[oauth_provider.ini]
<= config-from-template
host = 0.0.0.0
port = ${ports:3}
workers = 1
redis = redis://:${project:redis_password}@${project:redis_host}:${ports:2}/${project:redis_auth_db}
secret = 1234567
hash_secret_key = ${project:hash_secret_key}
timezone = ${project:timezone}
auction_client_id = ${project:auction_client_id}
auction_client_secret = ${project:auction_client_secret}

[auction_worker_defaults.json]
<= config-from-template
TENDERS_API_URL = https://api-sandbox.openprocurement.org/
TENDERS_API_VERSION = ${project:tenders_api_version}
TENDERS_API_TOKEN = ${project:tenders_api_token}
AUCTIONS_URL = http://auction-sandbox.openprocurement.org/tenders/{auction_id}
HASH_SECRET = ${project:hash_secret_key}
COUCH_DATABASE = http://${project:couchdb_admin}:${project:couchdb_password}@${project:couchdb_host}:${ports:0}/${project:auctions_couchdb_databese_name}
OAUTH_CLIENT_ID = ${project:auction_client_id}
OAUTH_CLIENT_SECRET = ${project:auction_client_secret}
OAUTH_BASE_URL = http://localhost:${ports:3}/api/
OAUTH_REQUEST_TOKEN_URL = 
OAUTH_ACCESS_TOKEN_URL = http://localhost:${ports:3}/oauth/token
OAUTH_AUTHORIZE_URL = http://localhost:${ports:3}/oauth/authorize
TZ = ${project:timezone}
STARTS_PORT = ${ports:10}
REDIS_URL = redis://:${project:redis_password}@${project:redis_host}:${ports:2}/${project:redis_mapping_db}
WORKER_BIND_IP = ${project:worker_bind_ip}
planning_procerude = ${project:planning_procerude}

[download_loggly_pipe]
recipe = hexagonit.recipe.download
url = https://raw.githubusercontent.com/quintagroup/loggly-pipe/master/loggly_pipe.py
download-only = true
destination = ${buildout:bin-directory}

[preapre_loggly_script]
recipe = collective.recipe.template[genshi]:genshi
input = inline:
   #!/bin/bash
   /bin/journalctl -o json --user -f --lines=0| ${buildout:bin-directory}/python_interpreter ${buildout:bin-directory}/loggly_pipe.py -t  ${preapre_loggly_script:api_key} -b 1 -T ${buildout:server_type}
output = ${buildout:bin-directory}/journal_to_loggly
api_key = 
mode = 777


[start_replication_script]
recipe = collective.recipe.template[genshi]:genshi
input = inline:
    #!/bin/bash
    set  -x
    if [ -f ~/.bash_profile ]; then
         .  ~/.bash_profile
    fi
    /usr/bin/sleep 10
    /usr/bin/echo "Start replication"
    HOSTNAME=`/usr/bin/hostname`
    while ! /usr/bin/curl -s -H 'Content-Type:application/json' -XPOST  -d "{\"source\": \"${start_replication_script:source}\", \"target\": \"${start_replication_script:target}\", \"continuous\": true, \"create_target\": true}" ${start_replication_script:db_url}; do /usr/bin/sleep 2; /usr/bin/echo "Re-try to start replication"; done
    /usr/bin/echo "Replication started"


target = http://${project:couchdb_admin}:${project:couchdb_password}@${project:couchdb_host}:${ports:0}/${project:auctions_couchdb_databese_name}
source = 
db_url = http://${project:couchdb_admin}:${project:couchdb_password}@${project:couchdb_host}:${ports:0}/_replicator

output = ${buildout:bin-directory}/start_replication_script
mode = 777


[loggly_pipe.service]
<= config-from-template


[autostart]
recipe = z3c.recipe.usercrontab
times = @reboot
command = ${buildout:directory}/bin/python_interpreter ${buildout:directory}/start.py